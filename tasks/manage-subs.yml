---
# Evaluate whether to use e4s repositories or not
- name: Ensure 'sap_rhsm_repos' exists and points to the correct repository list
  set_fact:
    sap_rhsm_repos: "{{ (sap_rhsm_use_e4s) | ternary(sap_rhsm_e4s_repos, sap_rhsm_standard_repos) }}"

# Need to use the 'command' module for this task since the "redhat_subscription" module
# won't do a full "clean" when using the "state: absent" option
# - note the 'warn: False' set because of this situation
- name: 'Unregister the system if already registered - if this is a force re-registration'
  command: "{{ item }}"
  args:
    warn: False
  with_items:
  - 'subscription-manager clean'
  - 'subscription-manager remove --all'
  - 'yum remove -y "katello-ca-consumer-*"'
  when:
  - (sap_rhsm_force_register|default('no'))|lower == 'yes'

# Need to use the 'command' module for this task since the "yum" module
# won't honor an "upgrade" of the RPM in case where the source server changed.
# - note the 'warn: False' set because of this situation
- name: "Install Satellite certificate (if applicable)"
  command: "rpm -Uh --force http://{{ sap_rhsm_server_hostname }}/pub/katello-ca-consumer-latest.noarch.rpm"
  args:
    warn: False
  when:
  - sap_rhsm_server_hostname is defined
  - sap_rhsm_server_hostname | length > 0

- name: 'Register system using Red Hat Subscription Manager'
  redhat_subscription:
    state: present
    username: "{{ sap_rhsm_username | default(omit) }}"
    password: "{{ sap_rhsm_password | default(omit) }}"
    pool_ids: "{{ sap_rhsm_pool_ids | default(omit) }}"
    auto_attach: "{{ ((sap_rhsm_pool_ids is defined or sap_rhsm_activationkey is defined) | ternary(omit, true)) }}"
    server_hostname: "{{ sap_rhsm_server_hostname | default(omit) }}"
    activationkey: "{{ sap_rhsm_activationkey | default(omit) }}"
    org_id: "{{ sap_rhsm_org_id | default(omit) }}"
    server_proxy_hostname: "{{ sap_rhsm_proxy_hostname | default(omit) }}"
    server_proxy_port: "{{ sap_rhsm_proxy_port | default(omit) }}"
    server_proxy_user: "{{ sap_rhsm_proxy_user | default(omit) }}"
    server_proxy_password: "{{ sap_rhsm_proxy_password | default(omit) }}"
    force_register: "{{ sap_rhsm_force_register | default(omit) }}"
  when: (sap_rhsm_username is defined and sap_rhsm_password is defined) or
        (sap_rhsm_activationkey is defined and sap_rhsm_org_id is defined)

- name: 'Ensure RHEL minor release is locked to SAP certified release'
  command: 'subscription-manager release --set={{ ansible_distribution_version }}'
  register: rhsm_lock
  changed_when: "'Release set to' in rhsm_lock.stdout"

- name: "Obtain currently enabled repos"
  shell: 'set -o pipefail && subscription-manager repos --list-enabled | sed -ne "s/^Repo ID:[^a-zA-Z0-9]*\(.*\)/\1/p"'
  register: enabled_repos
  check_mode: false  # aka run_always: true, makes sure next task doesn't unduly fail in check mode
  changed_when: "'Dummy check for passing lint, just a query, nothing changes' in enabled_repos.stdout"

# Build the list of repos to disable/enable before calling 'subscription-manager' as it's a very
# expensive command to run and hence better to call just once (especially with a long list of repos)
- name: "Build command line for repos to disable"
  set_fact:
    repos_params: "{{ repos_params|default('') }} --disable={{ item }}"
  with_items:
  - "{{ enabled_repos.stdout_lines | difference(sap_rhsm_repos) }}"

- name: "Build command line for repos to enable"
  set_fact:
    repos_params: "{{ repos_params|default('') }} --enable={{ item }}"
  with_items:
  - "{{ sap_rhsm_repos | difference(enabled_repos.stdout_lines) }}"

- name: "Run 'subscription-manager to disable/enable repos"
  command: "subscription-manager repos {{ repos_params }}"
  when:
  - repos_params is defined
  - repos_params | length > 0

- name: "Register the system to Red Hat Insights"
  command: "insights-client --register --retry={{ sap_rhsm_register_insights_retries }}"
  when:
  - sap_rhsm_register_insights is defined
  - sap_rhsm_register_insights